
objects
-------
-Everything in python is object
-Every object contains set of methods


number
------
number can be integer or decimal or octal or hexa.

aval = 10
bval = 34.44

string
-------
string is sequence of characters
string can be defined in single or double or triple quotes.

aname = 'python programming'
bname = "unix shell"
cname = """hadoop administration"""


list ( array ) 
-----
list contains set of elements.
Elements can be set of numbers or set of strings or any combination.
list elements are defined in [].

alist = [10,20,30,40]
blist = ["unix","hadoop","java"]
clist = ["python",243,56.4,"java"]


tuple  ( READ ONLY , immutable ) 
-------
tuple contains set of elements.
Elements can be set of numbers or set of strings or any combination.
tuple elements are defined in ().
** Elements defined in tuple cannot be changed directly


atup = (10,20,30,454)
btup = ("hadoop","java")
ctup = (23.4,43,43,"scala")


dictionary
---------
dictionary contains elements in keys and values.
Indexing is not allowed in dictionary
In dictionary , keys are always UNIQUE
                key is  either string or number
               values can be number or string or list or tuple or dictionary or any other complext datastructure.

syntax:     object = { key:value , key:value , key:value }
example:     book  = {"chap1":10 ,"chap2":20 ,"chap3":30 }
             print(book["chap1"])   # 10
             info  = {1:2,3:4,5:6}
              data = { "chap1":[10","UK","Rita"] ,"chap2":[20,"Sheetal","UK"],"chap3":[30,"AUS","Ram" }




set
----
set is UNORDERED collection of UNIQUE elements of SAME TYPE.

aset = {10,20,30,30,30}



functions & methods
-----------------------


methods : methods are object specific
          Every object has its own methods.
          String methods are different methods
          methods are accessible with . operator.


functions:  functions are common for all the objects
            Eg.  print()


Builtin functions
----------------------

print()
range()
type()
help()
dir()
max()
len()
min()
sum()
input()
isinstance()
open()

conversion functions ( typecasting functions)
int()
float()
oct()
list()
tuple()
dict()
set()
str()

operators
--------


arithmetic operators : 
---------------------
+ - % /

relation operators :   <   <=    >    >=    ==    !=
-----------------
a,b = 10,20
if a < 20

name = "python":
    # your logic

if name.find("th") != -1 :
    # your logic


assignment operators  ( ++ and -- is not allowed in python)
---------------------
val = 10
val = val + 1    (or)   val +=1
val = val -1     (or)   val -=1


logical operators
------------------


name = "python"
if name.isupper()  and len(name) == 6 :
     # your logic

if name.isupper()  or len(name) == 6 :
     # your logic

special operators
--------------------
in
as
*
+   concatenation operator




commenting in python
---------------------

#  - single line comment



multiline comment

''' 
this
 is 
the
multi line 
comment'''


file handling
---------------

- working with flat files ( csv  log conf txt ... )

- working with third party files ( pdf xlsx xls doc docx mp4 )


working with flat files 
-----------------------
- read ( r ) 
- write ( w )
- append( a )


opening the file
-----------------

syntax:    object = open(filename,mode)
example:    fobj  = open("customers.txt","r")
            case1 : If the file is not existing ... it will throw an error saying FileNotFoundError
            case2 : If the file is existing ....... it will display the file content

            fobj = open("customers.txt","w")
            case1 : If the file is not existing... file will be created first and then writes to the file
            case2 : If the file is already existing.. it overwrite the existing file content first 

    
        fobj = open("customers.txt","a")
            case1 : If the file is not existing... file will be created first and then writes to the file
            case2 : If the file is already existing.. it appends the data the existing file content 




closing the object
---------------------
syntax:    object.close()
example:     fobj.close()


exception handling
---------------------

1. syntax error
2. sementic error or runtime error


handling the errors in the runtime is known
as exception handling


try
except
else
finally
raise



user-defined functions
--------------------
- reusability

ways of passing arguments
-------------------------
-fixed arguments
- default arguments
- variable length arguments





library | package | module 
---------------------------


importing all the methods
------------------------------
import math
print(math.log(2))
print(math.tan(2))


importing with alias name
--------------------------
import math as m
print(m.log(2))
print(m.cos(1))

importing ONLY required methods ( . is not required in this context )
-----------------------------
from math import log
print(log(2))
print(ceil(34.4))



import os
                                        ftp or SSH 

os.chdir("D:\\")

os.unlink('file.txt')
os.remove('a.txt')


There are 2 types of libraries
-----------------------------


- builtin libraries
--------------------
All the builtin libraries are installed with python setup which are generally used(OS Operations, math operations, mailing , date and time ,ftp operations ,calendar ,copying files , zipping) by everyone.


- third party libraries
-----------------------
Depending on the requirement(cloud, DS , networking, datanalytics, database opertions) developer has to install the third party library from https://pypi.org/   OR pip tool.



pip tool
----------
when you install python ,pip(tiny tool or installing packages )  will be install along with it.









display all databases
--------------------
show databases;

creating your database
---------------------
create database acuvate;

access your database
------------------
use acuvate;

display all tables ( it will be empty)
-------------------------------------
show tables ;

creating table
--------------
create table realestate ( street varchar(100), city varchar(100) );

inserting records
------------------
insert into realestate values('HitechCity','Hyderabad');
insert into realestate values('Banjara Hills','Hyderabad');

displaying all the records
----------------------------
select * from realestate ;


display structure of table
------------------------------
desc realestate;
































































































































          











